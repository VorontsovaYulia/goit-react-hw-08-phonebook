{"version":3,"file":"static/js/382.59d0489b.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactCard/ContactCard.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/PhonebookPage.js"],"sourcesContent":["import { styled } from \"styled-components\";\nimport { Form } from \"formik\";\n\nexport const StyledForm = styled(Form)`\n       display: flex;\n    flex-wrap: wrap;\n    gap: 16px;\n    flex-direction: column;\n    align-items: flex-end;\n    padding: 20px 0;\n    align-content: space-around;\n`;\n\nexport const StyledLabel = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n`;","import * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { Formik, Field } from \"formik\";\nimport { TextField } from 'formik-mui';\nimport Button from '@mui/material/Button';\nimport { StyledForm, StyledLabel } from \"./ContactForm.styled\";\nimport { addContact } from \"redux/contacts/operations\";\n\nexport const ContactForm = () => {\n  const NameSchema = Yup.object().shape({\n    name: Yup.string()\n      .min(3, 'Too Short!')\n      .max(30, 'Too Long!')\n      .matches(\n        /^[A-Za-zА-Яа-яЄєІіЇїҐґ\\s]+$/,\n        'Use only letters'\n      )\n      .required('Required'),\n    number: Yup.string()\n      .required('Required')\n      .matches(/^\\+?\\d{2} ?-?\\(?\\d{3}\\)? ?-?\\d{3} ?-?\\d{2} ?-?\\d{2}$/, 'Intenational format number(12 symbol)'),\n  });\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Formik\n        validationSchema={NameSchema}\n        initialValues={{\n          name: '',\n          number: ''\n        }}\n    \n        onSubmit={(values, actions) => {\n          dispatch(addContact({\n            name: values.name,\n            number: values.number\n          }))\n          actions.resetForm();\n        }}\n      >\n        <StyledForm>\n          <StyledLabel>\n            <Field\n              component={TextField}\n              label=\"Name\"\n              name=\"name\"\n              variant=\"standard\"\n              sx={{ width: 400 }}\n            />\n          </StyledLabel>\n          <StyledLabel>\n            <Field\n              component={TextField}\n              label=\"Number\"\n              name=\"number\"\n              variant=\"standard\"\n              type=\"string\"\n              sx={{ width: 400 }}\n            />\n          </StyledLabel>\n          <Button variant=\"contained\" type=\"submit\">Add contact</Button>\n        </StyledForm>\n      </Formik>\n    </>\n  )\n};","import TableCell from '@mui/material/TableCell';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport { useDispatch} from \"react-redux\"\nimport { deleteContact, updateContact } from \"redux/contacts/operations\";\nimport { useState } from 'react';\nimport { TextField } from '@mui/material';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport Grid from '@mui/material/Grid';\nimport EditNoteIcon from '@mui/icons-material/EditNote';\nimport Avatar from '@mui/material/Avatar';\n\nexport const ContactCard = ({ item: { name, number, id } }) => {\n    const [open, setOpen] = useState(false);\n    const dispach = useDispatch();\n   \n    const handleOpenModal = () => setOpen(true);\n    const handleCloseModal = () => setOpen(false);\n    \n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        console.dir(evt.currentTarget)\n        const data = new FormData(evt.currentTarget);\n        const newContact = {\n            id,\n            contact: {\n                name: data.get('name'),\n                number: data.get('number'),\n            }\n        };\n        console.log(newContact)\n        dispach(updateContact(newContact))\n        handleCloseModal();\n    }\n    const style = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        boxShadow: 24,\n        p: 4,\n    };\n\n    return (\n        <>\n            <TableCell component=\"th\" scope=\"row\">\n                <Avatar src=\"/broken-image.jpg\" sx={{backgroundColor: '#1976d2'}} />\n            </TableCell>\n            <TableCell align=\"right\">{name}</TableCell>\n            <TableCell align=\"right\">{number}</TableCell>\n            <TableCell align=\"right\">\n                <Grid item xs={8}>\n                    <EditNoteIcon onClick={(evt) => handleOpenModal()\n                    } />\n                </Grid>\n                \n            </TableCell>\n            <TableCell align=\"right\">\n                <Grid item xs={8}>\n                    <DeleteForeverIcon onClick={() => dispach(deleteContact(id))} />\n                </Grid>\n            </TableCell>\n            \n            \n            <Modal\n                open={open}\n                onClose={handleCloseModal}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                        Edit Contact\n                    </Typography>\n                    <Box component=\"form\" onSubmit={handleSubmit}>\n                        <TextField id=\"standard-basic\" name=\"name\" variant=\"standard\" defaultValue={name} />\n                        <TextField id=\"standard-basic\" name=\"number\" variant=\"standard\" defaultValue={number} />\n                        <Button type='submit'>Done</Button>\n                    </Box>\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n                    </Typography>\n                </Box>\n            </Modal>\n        </>\n    )\n};","export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { ContactCard } from \"components/ContactCard/ContactCard\"\nimport { selectContacts, selectFilter } from \"redux/contacts/selectors\";\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const filterContacts = contacts.filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()));\n    const dispatch = useDispatch();\n    const isLoading = useSelector(state => state.contacts.isLoading)\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n    \n    return (\n        isLoading ? <Box sx={{ width: '100%', marginTop: 4}}>\n                <LinearProgress />\n            </Box> :\n            <div>\n                <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                        <TableBody>\n                            {filterContacts.map(el =>\n                                <TableRow\n                                    key={el.id}\n                                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\n                                    <ContactCard item={el} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n    )\n};","import { useDispatch } from \"react-redux\"\nimport { TextField } from \"@mui/material\";\nimport { filterContact } from \"redux/contacts/filterSlice\";\n\nexport const Filter = () => {\n    const dispach = useDispatch();\n    \n    return (\n        <div>\n            <TextField\n                label=\"Search contact\"\n                id=\"filled-size-small\"\n                variant=\"filled\"\n                size=\"small\"\n                onChange={evt => dispach(filterContact(evt.currentTarget.value))} name=\"filter\"\n            />\n        </div>\n    )\n};","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\n\nconst PhonebookPage = () => {\n    return <div>\n        <ContactForm />\n        <Filter />\n        <ContactList />\n    </div>\n};\n\nexport default PhonebookPage;"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledLabel","_templateObject2","ContactForm","NameSchema","Yup","shape","name","min","max","matches","required","number","dispatch","useDispatch","_jsx","_Fragment","children","Formik","validationSchema","initialValues","onSubmit","values","actions","addContact","resetForm","_jsxs","Field","component","TextField","label","variant","sx","width","type","Button","ContactCard","_ref","_ref$item","item","id","_useState","useState","_useState2","_slicedToArray","open","setOpen","dispach","handleCloseModal","TableCell","scope","Avatar","src","backgroundColor","align","Grid","xs","EditNoteIcon","onClick","evt","DeleteForeverIcon","deleteContact","Modal","onClose","Box","position","top","left","transform","bgcolor","border","boxShadow","p","Typography","preventDefault","console","dir","currentTarget","data","FormData","newContact","contact","get","log","updateContact","defaultValue","mt","selectContacts","state","contacts","items","selectFilter","filter","ContactList","useSelector","filterContacts","toLowerCase","includes","isLoading","useEffect","fetchContacts","marginTop","LinearProgress","TableContainer","Paper","Table","minWidth","TableBody","map","el","TableRow","Filter","size","onChange","filterContact","value"],"sourceRoot":""}